#!/usr/bin/env ruby

# handle commands appear in comments
#
#     process [-t expect.txt] repo comments.json
#
# Complex string processing is a mess in bash scripts, thus
# we use a ruby script.

require 'json'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: process [-t expect.txt] lampepfl/dotty comments.json"

  opts.on("-t", "--test expect.txt", "path to a expect file") do |v|
    options[:test] = v
  end
end.parse!

USERS=%w(odersky biboudis allanrenucci Blaisorblade Duhemm gsps smarter nicolasstucki liufengyun OlivierBlanvillain sjrd abgruszecki milessabin anatoliykmetyuk bishabosha Linyxus dwijnand mbovel noti0na1 prolativ WojciechMazur szymon-rd)
PROG_HOME=File.expand_path("../..", __FILE__)
REPO=ARGV[0]
FILE=ARGV[1]

def notify(pr, commits)
  Dir.chdir(PROG_HOME) do
    total=`find jobs/ -name "*.job" | wc -l`.strip
    running=`find jobs/ -name "*.running" | wc -l`.strip

    if commits.size == 0
      message="performance test scheduled: #{total} job(s) in queue, #{running} running."
    else
      message="performance test scheduled for #{commits.join(" ")}: #{total} job(s) in queue, #{running} running."
    end

    `ghi comment #{pr} -m "#{message}"  -- #{REPO}`
  end
end

def valid?(comment)
  !comment["body"].empty? && (
    parts = comment["body"].split
    (parts[0] == "test" || parts[0] == "retest") &&
    parts[1] == "performance"
  ) &&
  comment["html_url"].include?("pull") &&
  USERS.include?(comment["user"]["login"])
end

# Github data format:  https://api.github.com/repos/lampepfl/dotty/issues/comments?since=2018-04-10
#
# [
# {
#   "url": "https://api.github.com/repos/lampepfl/dotty/issues/comments/380351884",
#   "html_url": "https://github.com/lampepfl/dotty/pull/4244#issuecomment-380351884",
#   "id": 380351884,
#   "user": {
#     "login": "liufengyun",
#     "id": 754633,
#   },
#   "created_at": "2018-04-11T07:16:13Z",
#   "updated_at": "2018-04-11T07:16:13Z",
#   "body": "test performance with #quotes please"
# }
# ]
def filter(file)
  content = File.read(file)
  data = JSON.parse(content)
  data.select { |comment| valid?(comment) }
end

def process(comment)
  message = comment["body"]

  # https://github.com/lampepfl/dotty/pull/2970#issuecomment-321860528
  pr = comment["html_url"][/.*pull\/([0-9]+)#.*/, 1]

  commits = (message[/.*:(.*)/, 1] || "").split.map { |hash| hash.gsub(/[^0-9a-z]/i, '') }.select { |hash| !hash.empty? }

  profile = (message[/.* with #(\w+) *./, 1] || "pull").gsub(/[^0-9a-z]/i, '')

  fresh = message =~ /.*retest.*/

  {
    pr: pr,
    profile: profile,
    fresh: fresh,
    commits: commits
  }
end

def execute(command)
  pr = command[:pr]

  fresh = ""
  fresh = "-n" if command[:fresh]

  commits = ""
  commits = "-c " + command[:commits].join(":") if command[:commits].size > 0

  Dir.chdir(PROG_HOME) do
    `echo "bin/pull -p #{command[:profile]} #{fresh} #{commits} #{pr}" > jobs/pull-#{pr}.job`
  end

  notify(pr, command[:commits])
end

# don't use MiniTest for simplicity
def assert(expr, message)
  raise message unless expr
end

def test(file, expect)
  expected = File.read(expect)
  s = StringIO.new
  filter(file).each do |message|
    s.puts process(message)
  end
  actual = s.string
  message = <<-HEREDOC
======= actual =========
#{actual}

======= expected =========
#{expected}
HEREDOC
  assert(actual.strip == expected.strip, message)
end

if __FILE__ == $0
  if options.key?(:test)
    test(FILE, options[:test])
  else
    filter(FILE).each do |message|
      execute(process(message))
    end
  end
end
